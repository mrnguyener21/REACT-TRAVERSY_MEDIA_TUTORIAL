Below is the link to the github repository for the tutorial
https://github.com/bradtraversy/react-crash-2021


TOPIC -Files & folders
root dev is what amkes everything happen when you render it



TOPIC -App component & JSX
-App.js is the root (main) component
-classname is used instead of class
-in the app.js file get rid of what swithin the div so you can start replacing it with your content
-logo.svg, app.css, app.test.js & setupTests.js we can get rid of
-when we return the JSX, we can only return a single parent 
-react framents <></> are good to use when needing tor eturn multiple elements and are just empty html tags

TOPIC -Expressions in JSX
-javascript is written before the return(the return contains the JSX)
-javscript is written in {} when writing in JSX in the return section



TOPIC -Creating a component
-to create different components of a website(header, pages, sections) it will all be done within the component folder
-each component will have their own JS files in the component folder
--GET ES7 REACT/REDUX/GRAPHQL/REAT-NATIVE SNIPPETS help create boiler plates
-apparently we don't need import React from 'react' anymore if you don't use class
-you will import each component into the App.js file and you tghen use the imported component like an HTML tag
-ex: you imported a component named Header (Header.js) into your App.js file and you want to use it. so you do the following:
    import Header from 'INSERT FILE LOCATION HERE' HERE YOU ARE IMPORTING THE HEADER COMPONENT INTO APP

    const App = () => {
        return(
            <div>
            <Header/> HERE YOU ARE USING THE IMPORTED HEADER COMPONENT BY CALLING IT AS A HTML TAG
            </div>
        )
    }
    export default App


TOPIC -Component Props
-we can pass props through components 
-we can also pass default props as shown in the example below:
    const Header = (props) => {
        return{
            <header>
                <h1>{props.title</h1>
            </header>
        }
    }
    //below is the defaultProps, so in this case if we don't use the prop in App.js(the file we import the header component to) then by default the header will show 'Hi this is the default title' as the default for the title prop 
    Header.defaultProps = {
        title: 'Hi this is the default title'
        //we can keep adding more to this if there are more props within the component
    }

    export default Header

-NOTE TO SELF, REMEMBER TO DESTRUCTURE WHEN USING PROPS SO THEN INSTEAD OF GOING props.title YOU CAN JUST WRITE title 


TOPIC -PropTypes
-its a built in type system for your properties
-don't really need this 

TOPIC -Styling
-you can use a style sheet(what i normally already do)
-you can also use style components or direct CSS in javascript as example:
    <header>
        <h1 style={{color:'red', backgroundColor:'black'}}>{title}</h1>
    </header>
-you can do it as a variable
    <header>
        <h1 style={color:'red', backgroundColor:'black'}>{title}</h1>
    </header>

    const headingStyle ={
        {color:'red', backgroundColor:'black'}
    }
    //notice how since we are using a style variable we are only using single brackets when we call it in the styles argument for the h1 tag


TOPIC -Button Component (EXAMPLE FOR REUSABLE REACT COMPONENT)
-you can create anything into a component such as a buttons component so you can reuse the component without having to recreate the button everytime
TOPIC -Events

TOPIC -Tasks Component

TOPIC -Create a list with .map()

TOPIC -State & useState Hook

TOPIC -Global state

TOPIC -Task Component

TOPIC -Icons with react-icons

TOPIC -Delete task & prop drilling

TOPIC -Optional message if no tasks

TOPIC -Toggle reminder & conditional styling

TOPIC - Add Task Form

TOPIC - Form input state (controlled components)

TOPIC - Add task submit

TOPIC - showAddTask state

TOPIC - Button toggle

TOPIC - Build for production

TOPIC - JSON Server

TOPIC - useEffect Hook & Fetch tasks from server

TOPIC - Delete task from server

TOPIC - Add task to server

TOPIC - Toggle reminder on server

TOPIC - Routing, footer & about